# Docker Compose 配置文件
# 用于定义和运行多容器Docker应用程序
# 版本号：3.8 支持最新的Docker功能
version: '3.8'

# 定义服务列表
services:
  # MongoDB数据库服务
  mongodb:
    image: mongo:5.0  # 使用MongoDB 5.0版本的官方镜像
    container_name: questionnaire-mongo  # 容器名称
    restart: always  # 容器崩溃时自动重启
    environment:  # 环境变量配置
      MONGO_INITDB_ROOT_USERNAME: admin  # MongoDB root用户名
      MONGO_INITDB_ROOT_PASSWORD: password123  # MongoDB root密码
    ports:
      - "27017:27017"  # 端口映射：主机端口:容器端口
    volumes:  # 数据卷配置
      - mongodb_data:/data/db  # 持久化MongoDB数据
      - ./infrastructure/mongodb/init.js:/docker-entrypoint-initdb.d/init.js  # 初始化脚本

  # Redis缓存服务
  redis:
    image: redis:6.2-alpine  # 使用Redis 6.2版本的轻量级镜像
    container_name: questionnaire-redis  # 容器名称
    restart: always  # 容器崩溃时自动重启
    ports:
      - "6379:6379"  # 端口映射：主机端口:容器端口
    command: redis-server --appendonly yes  # 启用AOF持久化
    volumes:
      - redis_data:/data  # 持久化Redis数据

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: registry.cn-hangzhou.aliyuncs.com/aliyun/node:18-alpine
    container_name: questionnaire-backend  # 容器名称
    restart: always  # 容器崩溃时自动重启
    ports:
      - "3000:3000"  # 端口映射：主机端口:容器端口
    environment:  # 环境变量配置
      NODE_ENV: development  # 开发环境
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/questionnaire?authSource=admin  # MongoDB连接URI
      REDIS_URI: redis://redis:6379  # Redis连接URI
    depends_on:  # 依赖服务
      - mongodb  # 依赖MongoDB服务
      - redis  # 依赖Redis服务
    volumes:  # 数据卷配置
      - ./backend:/app  # 将本地backend目录挂载到容器的/app目录
      - /app/node_modules  # 排除node_modules目录的挂载

  # 管理后台服务
  admin-panel:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
    container_name: questionnaire-admin  # 容器名称
    restart: always  # 容器崩溃时自动重启
    ports:
      - "8080:80"  # 端口映射：主机端口:容器端口
    depends_on:
      - backend  # 依赖后端服务

# 定义数据卷
volumes:
  mongodb_data:  # MongoDB数据持久化卷
  redis_data:  # Redis数据持久化卷

# 使用说明：
# 1. 启动所有服务：docker-compose up -d
# 2. 查看服务状态：docker-compose ps
# 3. 查看服务日志：docker-compose logs -f [服务名]
# 4. 停止所有服务：docker-compose down
# 5. 重启服务：docker-compose restart [服务名]
# 6. 构建服务：docker-compose build [服务名]
